
phase_defused:
   0x0000563d473a737c <+0>:	endbr64
   0x0000563d473a7380 <+4>:	push   %r12
   0x0000563d473a7382 <+6>:	push   %rbp
   0x0000563d473a7383 <+7>:	push   %rbx
   0x0000563d473a7384 <+8>:	sub    $0x50,%rsp
   0x0000563d473a7388 <+12>:	mov    %rdi,%r12
   0x0000563d473a738b <+15>:	mov    %fs:0x28,%rax
   0x0000563d473a7394 <+24>:	mov    %rax,0x48(%rsp)
   0x0000563d473a7399 <+29>:	xor    %eax,%eax
   0x0000563d473a739b <+31>:	mov    %rsp,%rdi
   0x0000563d473a739e <+34>:	mov    $0x40,%esi
   0x0000563d473a73a3 <+39>:	callq  0x563d473a6380 <gethostname@plt>
   0x0000563d473a73a8 <+44>:	test   %eax,%eax
   0x0000563d473a73aa <+46>:	jne    0x563d473a73b2 <phase_defused+54>
   0x0000563d473a73ac <+48>:	mov    %eax,%ebp
   0x0000563d473a73ae <+50>:	mov    %eax,%ebx
   0x0000563d473a73b0 <+52>:	jmp    0x563d473a73cb <phase_defused+79>
   0x0000563d473a73b2 <+54>:	lea    0x20b7(%rip),%rdi        # 0x563d473a9470
   0x0000563d473a73b9 <+61>:	callq  0x563d473a6270 <puts@plt>
   0x0000563d473a73be <+66>:	mov    $0x8,%edi
   0x0000563d473a73c3 <+71>:	callq  0x563d473a6390 <exit@plt>
   0x0000563d473a73c8 <+76>:	add    $0x1,%ebx
   0x0000563d473a73cb <+79>:	movslq %ebx,%rax
   0x0000563d473a73ce <+82>:	lea    0x5eab(%rip),%rdx        # 0x563d473ad280 <host_table>
   0x0000563d473a73d5 <+89>:	mov    (%rdx,%rax,8),%rdi
   0x0000563d473a73d9 <+93>:	test   %rdi,%rdi
   0x0000563d473a73dc <+96>:	je     0x563d473a73ef <phase_defused+115>
   0x0000563d473a73de <+98>:	mov    %rsp,%rsi
   0x0000563d473a73e1 <+101>:	callq  0x563d473a6240 <strcasecmp@plt>
   0x0000563d473a73e6 <+106>:	test   %eax,%eax
   0x0000563d473a73e8 <+108>:	jne    0x563d473a73c8 <phase_defused+76>
   0x0000563d473a73ea <+110>:	mov    $0x1,%ebp
   0x0000563d473a73ef <+115>:	movl   $0x0,(%r12)
   0x0000563d473a73f7 <+123>:	mov    %r12,%rsi 
   0x0000563d473a73fa <+126>:	mov    $0x1,%edi
   0x0000563d473a73ff <+131>:	callq  0x563d473a6f20 <send_msg>
   0x0000563d473a7404 <+136>:	movslq %ebx,%rbx
   0x0000563d473a7407 <+139>:	lea    0x2332(%rip),%rax        # 0x563d473a9740 <secret_tokens>
   0x0000563d473a740e <+146>:	mov    (%rax,%rbx,4),%eax
   0x0000563d473a7411 <+149>:	cmp    %eax,(%r12)
   0x0000563d473a7415 <+153>:	jne    0x563d473a7441 <phase_defused+197>
   0x0000563d473a7417 <+155>:	test   %ebp,%ebp
   0x0000563d473a7419 <+157>:	je     0x563d473a7441 <phase_defused+197>
   0x0000563d473a741b <+159>:	cmpl   $0x6,0x624a(%rip)        # 0x563d473ad66c
   0x0000563d473a7422 <+166>:	je     0x563d473a7461 <phase_defused+229>
   0x0000563d473a7424 <+168>:	mov    0x48(%rsp),%rax
   0x0000563d473a7429 <+173>:	xor    %fs:0x28,%rax
   0x0000563d473a7432 <+182>:	jne    0x563d473a74bf <phase_defused+323>
   0x0000563d473a7438 <+188>:	add    $0x50,%rsp
   0x0000563d473a743c <+192>:	pop    %rbx
   0x0000563d473a743d <+193>:	pop    %rbp
   0x0000563d473a743e <+194>:	pop    %r12
   0x0000563d473a7440 <+196>:	retq
   0x0000563d473a7441 <+197>:	lea    0x2050(%rip),%rsi        # 0x563d473a9498
   0x0000563d473a7448 <+204>:	mov    $0x1,%edi
   0x0000563d473a744d <+209>:	mov    $0x0,%eax
   0x0000563d473a7452 <+214>:	callq  0x563d473a6360 <__printf_chk@plt>
   0x0000563d473a7457 <+219>:	mov    $0x8,%edi
   0x0000563d473a745c <+224>:	callq  0x563d473a6390 <exit@plt>
   
   0x0000563d473a7461 <+229>:	callq  0x563d473a6678 <abracadabra>
   ->注意这个奇怪的函数，让我们看看里面有什么
   0x0000563d473a7466 <+234>:	test   %eax,%eax
   0x0000563d473a7468 <+236>:	jne    0x563d473a7484 <phase_defused+264>
   0x0000563d473a746a <+238>:	lea    0x2137(%rip),%rdi        # 0x563d473a95a8
   0x0000563d473a7471 <+245>:	callq  0x563d473a6270 <puts@plt>
   0x0000563d473a7476 <+250>:	lea    0x215b(%rip),%rdi        # 0x563d473a95d8
   0x0000563d473a747d <+257>:	callq  0x563d473a6270 <puts@plt>
   0x0000563d473a7482 <+262>:	jmp    0x563d473a7424 <phase_defused+168>
   
   0x0000563d473a7484 <+264>:	callq  0x563d473a6729 <alohomora>
   ->这边也有个奇怪的函数，我们来看看
   
   0x0000563d473a7489 <+269>:	test   %eax,%eax
   0x0000563d473a748b <+271>:	je     0x563d473a74b1 <phase_defused+309>
   0x0000563d473a748d <+273>:	lea    0x2074(%rip),%rdi        # 0x563d473a9508
   -> 往rdi里放了值
   x/s 0x563d473a9508
   0x563d473a9508:	"Curses, you've found the secret phase!"

   0x0000563d473a7494 <+280>:	callq  0x563d473a6270 <puts@plt>
   0x0000563d473a7499 <+285>:	lea    0x2090(%rip),%rdi        # 0x563d473a9530
   -> 往rdi里放了值，在断点前查看之
   x/s 0x563d473a9530
   0x563d473a9530:	"But finding it and solving it are quite different..."

   0x0000563d473a74a0 <+292>:	callq  0x563d473a6270 <puts@plt>
   0x0000563d473a74a5 <+297>:	mov    $0x0,%eax

   0x0000563d473a74aa <+302>:	callq  0x563d473a6bcd <secret_phase>
   ->可以看到，在phase_defused中，对secret_phase有调用，在此处加断点
   b *0x0000563d473a74aa
   jump *0x0000563d473a74aa

   0x0000563d473a74af <+307>:	jmp    0x563d473a746a <phase_defused+238>
   0x0000563d473a74b1 <+309>:	lea    0x20b0(%rip),%rdi        # 0x563d473a9568
   ->x/s 0x563d473a9568
   0x563d473a9568:	"Do you think you really trigger the secret phase? Mua ha ha ha!"
   
   0x0000563d473a74b8 <+316>:	callq  0x563d473a6270 <puts@plt>
   0x0000563d473a74bd <+321>:	jmp    0x563d473a746a <phase_defused+238>
   0x0000563d473a74bf <+323>:	callq  0x563d473a6290 <__stack_chk_fail@plt>


abracadabra:
   0x00005595df70b678 <+0>:	endbr64
   0x00005595df70b67c <+4>:	sub    $0xa8,%rsp
   0x00005595df70b683 <+11>:	mov    %fs:0x28,%rax
   0x00005595df70b68c <+20>:	mov    %rax,0x98(%rsp)
   0x00005595df70b694 <+28>:	xor    %eax,%eax
   0x00005595df70b696 <+30>:	lea    0xc(%rsp),%rcx
   0x00005595df70b69b <+35>:	lea    0x8(%rsp),%rdx
   0x00005595df70b6a0 <+40>:	sub    $0x8,%rsp
   0x00005595df70b6a4 <+44>:	lea    0x28(%rsp),%rax
   0x00005595df70b6a9 <+49>:	push   %rax
   0x00005595df70b6aa <+50>:	lea    0x2c(%rsp),%rax
   0x00005595df70b6af <+55>:	push   %rax
   0x00005595df70b6b0 <+56>:	lea    0x30(%rsp),%rax
   0x00005595df70b6b5 <+61>:	push   %rax
   0x00005595df70b6b6 <+62>:	lea    0x34(%rsp),%r9
   0x00005595df70b6bb <+67>:	lea    0x30(%rsp),%r8
   
   0x00005595df70b6c0 <+72>:	lea    0x2ad5(%rip),%rsi        # 0x5595df70e19c //%d %d %d %d %d %d %s
   0x00005595df70b6c7 <+79>:	lea    0x702a(%rip),%rdi        # 0x5595df7126f8 <input_strings+120> //0 1 1 2 3 5
   
   0x00005595df70b6ce <+86>:	mov    $0x0,%eax
   0x00005595df70b6d3 <+91>:	callq  0x5595df70b350 <__isoc99_sscanf@plt>
   0x00005595df70b6d8 <+96>:	add    $0x20,%rsp
   0x00005595df70b6dc <+100>:	cmp    $0x7,%eax
   0x00005595df70b6df <+103>:	je     0x5595df70b701 <abracadabra+137>
   0x00005595df70b6e1 <+105>:	mov    $0x0,%eax
   0x00005595df70b6e6 <+110>:	mov    0x98(%rsp),%rsi
   0x00005595df70b6ee <+118>:	xor    %fs:0x28,%rsi
   0x00005595df70b6f7 <+127>:	jne    0x5595df70b724 <abracadabra+172>
   0x00005595df70b6f9 <+129>:	add    $0xa8,%rsp
   0x00005595df70b700 <+136>:	retq
   0x00005595df70b701 <+137>:	lea    0x20(%rsp),%rdi
   
   0x00005595df70b706 <+142>:	lea    0x2aab(%rip),%rsi        # 0x5595df70e1b8 //NothingThatHasMeaning1sEasy...
   
   0x00005595df70b70d <+149>:	callq  0x5595df70bd27 <strings_not_equal>
   0x00005595df70b712 <+154>:	test   %eax,%eax
   0x00005595df70b714 <+156>:	je     0x5595df70b71d <abracadabra+165>
   0x00005595df70b716 <+158>:	mov    $0x0,%eax
   0x00005595df70b71b <+163>:	jmp    0x5595df70b6e6 <abracadabra+110>
   0x00005595df70b71d <+165>:	mov    $0x1,%eax
   0x00005595df70b722 <+170>:	jmp    0x5595df70b6e6 <abracadabra+110>
   0x00005595df70b724 <+172>:	callq  0x5595df70b290 <__stack_chk_fail@plt>

   在 phase2 的后面加上 NothingThatHasMeaning1sEasy...
   !!但发现还不够，被调戏了呜呜呜～～
   继续看alohomora

alohomora:
   0x0000561af1cfe729 <+0>:	endbr64
   0x0000561af1cfe72d <+4>:	sub    $0x98,%rsp
   0x0000561af1cfe734 <+11>:	mov    %fs:0x28,%rax
   0x0000561af1cfe73d <+20>:	mov    %rax,0x88(%rsp)
   0x0000561af1cfe745 <+28>:	xor    %eax,%eax
   0x0000561af1cfe747 <+30>:	lea    0xc(%rsp),%rcx
   0x0000561af1cfe74c <+35>:	lea    0x8(%rsp),%rdx
   0x0000561af1cfe751 <+40>:	lea    0x10(%rsp),%r8
   0x0000561af1cfe756 <+45>:	lea    0x2a4b(%rip),%rsi        # 0x561af1d011a8 //%d %d %s
   0x0000561af1cfe75d <+52>:	lea    0x7084(%rip),%rdi        # 0x561af1d057e8 <input_strings+360>//输入的数据
   0x0000561af1cfe764 <+59>:	callq  0x561af1cfe350 <__isoc99_sscanf@plt>
   0x0000561af1cfe769 <+64>:	cmp    $0x3,%eax
   0x0000561af1cfe76c <+67>:	je     0x561af1cfe78e <alohomora+101>
   0x0000561af1cfe76e <+69>:	mov    $0x0,%eax
   0x0000561af1cfe773 <+74>:	mov    0x88(%rsp),%rsi
   0x0000561af1cfe77b <+82>:	xor    %fs:0x28,%rsi
   0x0000561af1cfe784 <+91>:	jne    0x561af1cfe7c8 <alohomora+159>
   0x0000561af1cfe786 <+93>:	add    $0x98,%rsp
   0x0000561af1cfe78d <+100>:	retq
   0x0000561af1cfe78e <+101>:	lea    0x10(%rsp),%rdx
   0x0000561af1cfe793 <+106>:	movzbl (%rdx),%eax
   0x0000561af1cfe796 <+109>:	test   %al,%al
   0x0000561af1cfe798 <+111>:	je     0x561af1cfe7a5 <alohomora+124>
   0x0000561af1cfe79a <+113>:	add    $0x2,%eax
   0x0000561af1cfe79d <+116>:	mov    %al,(%rdx)
   0x0000561af1cfe79f <+118>:	add    $0x1,%rdx
   0x0000561af1cfe7a3 <+122>:	jmp    0x561af1cfe793 <alohomora+106>
   0x0000561af1cfe7a5 <+124>:	lea    0x10(%rsp),%rdi
   0x0000561af1cfe7aa <+129>:	lea    0x2a27(%rip),%rsi        # 0x561af1d011d8 //000Gcu{FqgupvGpvgt3pvqItqypWrNkhg0
   0x0000561af1cfe7b1 <+136>:	callq  0x561af1cfed27 <strings_not_equal>
   0x0000561af1cfe7b6 <+141>:	test   %eax,%eax
   0x0000561af1cfe7b8 <+143>:	je     0x561af1cfe7c1 <alohomora+152>
   0x0000561af1cfe7ba <+145>:	mov    $0x0,%eax
   0x0000561af1cfe7bf <+150>:	jmp    0x561af1cfe773 <alohomora+74>
   0x0000561af1cfe7c1 <+152>:	mov    $0x1,%eax
   0x0000561af1cfe7c6 <+157>:	jmp    0x561af1cfe773 <alohomora+74>
   0x0000561af1cfe7c8 <+159>:	callq  0x561af1cfe290 <__stack_chk_fail@plt>
   说明输入的格式为"%d %d %s"
   输入的前两个值为"10 5"
   给出的字符串为000Gcu{FqgupvGpvgt3pvqItqypWrNkhg0
   我们将字符串的每个字符减二，得到...EasyDoesntEnter1ntoGrownUpLife.
   所以要输入"10 5 ...EasyDoesntEnter1ntoGrownUpLife."

secret_phase:
   0x0000556a8d043bcd <+0>:	endbr64
   0x0000556a8d043bd1 <+4>:	push   %rbx
   0x0000556a8d043bd2 <+5>:	sub    $0x10,%rsp
   0x0000556a8d043bd6 <+9>:	mov    %fs:0x28,%rax
   0x0000556a8d043bdf <+18>:	mov    %rax,0x8(%rsp)
   0x0000556a8d043be4 <+23>:	xor    %eax,%eax
   0x0000556a8d043be6 <+25>:	callq  0x556a8d044231 <read_line>//输入字符串
   0x0000556a8d043beb <+30>:	mov    %rax,%rdi
   0x0000556a8d043bee <+33>:	mov    $0xa,%edx
   0x0000556a8d043bf3 <+38>:	mov    $0x0,%esi
   0x0000556a8d043bf8 <+43>:	callq  0x556a8d043310 <strtol@plt>//将输入的字符串转化为整数,返回为rax
   0x0000556a8d043bfd <+48>:	mov    %rax,%rbx//rbx=rax
   0x0000556a8d043c00 <+51>:	lea    -0x1(%rax),%eax//eax=rax-1
   0x0000556a8d043c03 <+54>:	cmp    $0x3e8,%eax//rax-0x3e8
   0x0000556a8d043c08 <+59>:	ja     0x556a8d043c6d <secret_phase+160>//rax不能超过0x3e8，否则会爆炸
   0x0000556a8d043c0a <+61>:	mov    %ebx,%esi//esi=ebx=rax
   0x0000556a8d043c0c <+63>:	lea    0x653d(%rip),%rdi        # 0x556a8d04a150 <n1> //0x24
   0x0000556a8d043c13 <+70>:	callq  0x556a8d043b8c <fun7>
   0x0000556a8d043c18 <+75>:	cmp    $0x6,%eax//如果返回值不为6，爆炸
   0x0000556a8d043c1b <+78>:	jne    0x556a8d043c74 <secret_phase+167>
   0x0000556a8d043c1d <+80>:	lea    0x263c(%rip),%rdi        # 0x556a8d046260 //Bravo! You've defused the secret stage
   0x0000556a8d043c24 <+87>:	callq  0x556a8d043270 <puts@plt>
   0x0000556a8d043c29 <+92>:	lea    0x2658(%rip),%rdi        # 0x556a8d046288 //\tDr. Evil finally knew that the students at PKU are not easy to defeat.
   0x0000556a8d043c30 <+99>:	callq  0x556a8d043270 <puts@plt>
   0x0000556a8d043c35 <+104>:	lea    0x2694(%rip),%rdi        # 0x556a8d0462d0 //\tHe fled in haste, but you know it is not over...
   0x0000556a8d043c3c <+111>:	callq  0x556a8d043270 <puts@plt>
   0x0000556a8d043c41 <+116>:	lea    0x26c0(%rip),%rdi        # 0x556a8d046308 //\t\"A sleepless malice\", uttered you as you caught a whiff of the next trouble...
   0x0000556a8d043c48 <+123>:	callq  0x556a8d043270 <puts@plt>
   0x0000556a8d043c4d <+128>:	lea    0x4(%rsp),%rdi
   0x0000556a8d043c52 <+133>:	callq  0x556a8d04437c <phase_defused>
   0x0000556a8d043c57 <+138>:	mov    0x8(%rsp),%rax
   0x0000556a8d043c5c <+143>:	xor    %fs:0x28,%rax
   0x0000556a8d043c65 <+152>:	jne    0x556a8d043c7b <secret_phase+174>
   0x0000556a8d043c67 <+154>:	add    $0x10,%rsp
   0x0000556a8d043c6b <+158>:	pop    %rbx
   0x0000556a8d043c6c <+159>:	retq
   0x0000556a8d043c6d <+160>:	callq  0x556a8d0440fe <explode_bomb>
   0x0000556a8d043c72 <+165>:	jmp    0x556a8d043c0a <secret_phase+61>
   0x0000556a8d043c74 <+167>:	callq  0x556a8d0440fe <explode_bomb>
   0x0000556a8d043c79 <+172>:	jmp    0x556a8d043c1d <secret_phase+80>
   0x0000556a8d043c7b <+174>:	callq  0x556a8d043290 <__stack_chk_fail@plt>

fun7:
   0x0000564e7e51cb8c <+0>:	endbr64
   0x0000564e7e51cb90 <+4>:	test   %rdi,%rdi//36
   0x0000564e7e51cb93 <+7>:	je     0x564e7e51cbc7 <fun7+59>
   0x0000564e7e51cb95 <+9>:	sub    $0x8,%rsp
   0x0000564e7e51cb99 <+13>:	mov    (%rdi),%eax//rax=M(rdi)
   0x0000564e7e51cb9b <+15>:	cmp    %esi,%eax
   0x0000564e7e51cb9d <+17>:	jg     0x564e7e51cbab <fun7+31>//rax>rsi
   0x0000564e7e51cb9f <+19>:	jne    0x564e7e51cbb8 <fun7+44>//rax!=rsi
   0x0000564e7e51cba1 <+21>:	mov    $0x0,%eax//eax=0
   0x0000564e7e51cba6 <+26>:	add    $0x8,%rsp//rsp+=8
   0x0000564e7e51cbaa <+30>:	retq
   0x0000564e7e51cbab <+31>:	mov    0x8(%rdi),%rdi//rdi=M(rdi+8)
   0x0000564e7e51cbaf <+35>:	callq  0x564e7e51cb8c <fun7>
   0x0000564e7e51cbb4 <+40>:	add    %eax,%eax//eax=2*eax
   0x0000564e7e51cbb6 <+42>:	jmp    0x564e7e51cba6 <fun7+26>
   0x0000564e7e51cbb8 <+44>:	mov    0x10(%rdi),%rdi//rdi=M(rdi+16)
   0x0000564e7e51cbbc <+48>:	callq  0x564e7e51cb8c <fun7>
   0x0000564e7e51cbc1 <+53>:	lea    0x1(%rax,%rax,1),%eax//rax=rax*2+1;
   0x0000564e7e51cbc5 <+57>:	jmp    0x564e7e51cba6 <fun7+26>
   0x0000564e7e51cbc7 <+59>:	mov    $0xffffffff,%eax
   0x0000564e7e51cbcc <+64>:	retqtq   

   0x564e7e523150 <n1>:    0x24   0x564e7e523190 <n22>:	0x32 0x564e7e523210 <n34>:	0x6b
                                  0x564e7e5231d0 <n33>:	0x2d
   0x564e7e523170 <n21>:   0x08   0x564e7e5231b0 <n32>:	0x16 0x564e7e522080 <n44>:	0x23 0
                                                              0     
                                  0x564e7e5220c0 <n43>:	0x14 0
                                  0
   0x564e7e5231f0 <n31>:	0x06   0x564e7e5220a0 <n42>:	0x07 0
                                  0
   0x564e7e522040 <n41>:	0x01   0
   0
   以上为纵向相差8，横向相差16
   
   print /x *(long*)(0x564e7e523150+16)
   $36 = 0x564e7e523190
   0x564e7e523190 <n22>:	0x32  0x564e7e5231d0 <n33>:	0x2d  0x564e7e522020 <n45>:	0x28 0
                                 0x564e7e5220e0 <n46>:	0x2f  0
   0x564e7e523210 <n34>:	0x6b  0x564e7e522060 <n47>:	0x63  0
                                 0
   0x564e7e522100 <n48>:	0xe9  0
   0
   以上为纵向相差16，横向相差8

   为二叉树，
   +16向右走:i++,j=2*j-1
   +8向左走:i++,j=2*j;

TO_CPP:

#include <iostream>
#include <stack>
using namespace std;
void bomb()
{
    printf("bomb!");
}
class Point
{
public:
    int x;
    int y;
    Point(int x_,int y_){x=x_;y=y_;};
};
int rax=0,rsi=0;
Point rdi=Point(1,1);
int tree[6][10]={
    {0,0,0,0,0,0,0,0,0,0},
    {0,0x24,0,0,0,0,0,0,0,0},
    {0,8,0x32,0,0,0,0,0,0,0},
    {0,6,22,0x2d,0x6b,0,0,0,0,0},
    {0,1,7,0x14,0x23,0x28,0x2f,0x63,0xe9,0},
    {0,0,0,0,0,0,0,0,0,0}
};
void fun7()
{
    if(rdi.x>=5)
        return;
    rax=tree[rdi.x][rdi.y];
    if(rax==rsi)
    {
        //bomb();
        rax=0;
        return ;
    }
    else if(rax<rsi)
    {
        rdi.x++;
        rdi.y*=2;
        fun7();
        rax=2*rax+1;
        return ;
    }
    else 
    {
        rdi.x++;
        rdi.y=rdi.y*2-1;
        fun7();
        rax=2*rax;
        return ;
    }
}
int main()
{
    for(int i=0;i<=0x1000;i++)
    {
        rsi=i;
        rax=0;
        rdi=Point(1,1);
        fun7();
        if(rax==6)
            cout<<rsi<<" ";
    }
    return 0;
}


   